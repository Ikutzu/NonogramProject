1.	lasketaan VARMAT pakosta t‰yttyv‰t ruudut (filled) rivi kerrallaan
	1.1	p‰ivit‰ omat reunavektorit (solved####Border)








2.	vertaillaan omia reunavektoreita mapin omiin reunavektoreihin
	2.1	vertaillaan serial numeroiden m‰‰r‰‰
		2.1.1	jos omassa reunavektorissa enemm‰n kuin mapin reunavektorissa (mapin reunavektorissa
				PITƒƒ olla VAIN YKSI)
				-> hae ensimm‰inen t‰ytetty, jonka j‰lkeen hae ensimm‰inen tyhj‰ ja t‰yt‰ seuraavaan
				t‰ytettyyn asti
	2.2	p‰ivit‰ omat reunavektorit (solved####Border)(tarkista myˆs onko omat samat kuin mapin)

3.	vertaillaan omien reunavektoreiden serial numeroiden arvoja mapin vastaaviin
	3.1	eka check onko serialien m‰‰r‰ smaa
		toka check onko m‰ts‰‰vi‰ serialeja
		jos on, niin etsii m‰ts‰‰v‰n serialin (tiet‰‰ kuinka mones serial, 
		skippaa niin monta ryp‰st‰) ja sen koordinaatista -1 (katsoo ettei ole <0) asetetaan emptyksi 
		ja t‰m‰n hetkinen koordinaatti + serial arvo (katsoo ettei ole >map width) asetetaan emptyksi 
		// katsoo jos oma serial on sama kuin mapin serial -> ruksii reunat (pid‰ huolta ettei 
		ruksita -1) //ja poistaa mapin reunavektorista ettei tarvi tarkistaa en‰‰
	3.2 vertailee reunavektoreiden arvoja, jos t‰ysin yhteven‰t -> rivi ratkaistu -> t‰yt‰ unknownit
		emptyill‰
	3.3	p‰ivit‰ omat reunavektorit (solved####Border)(tarkista myˆs onko omat samat kuin mapin)

4.	jos vain yksi ratkaisematon oma serial j‰ljell‰: asetetaan kaikki rivill‰ olevat unknownit emptyiksi,
	lasketaan mapin serialin ja vastaavan ratkaistun serialin erotus ja etsii kyseisen serialin rypp‰‰n
	ja sen koordinaatista -erotus asetetaan unknowniksi ja samasta koordinaatista + oman serialin
	arvo asetetaan emptyksi (muista tarkistaa ettei kyseiset koordinaatit ole filled)
	4.1	p‰ivit‰ omat reunavektorit (solved####Border)(tarkista myˆs onko omat samat kuin mapin)

5.	lasketaan ei emptyist‰ omat rypp‰‰t ja map serialien summa, v‰hennet‰‰n jokaisesta rypp‰‰st‰
	serialien summa, jos jostain erotuksesta tulee <0 niin kaikki serialit eiv‰t mahdu samaan 
	rypp‰‰seen -> tarkistetaan mahtuuko serial rypp‰‰seen, lasketaan mahdollisten rypp‰iden m‰‰r‰ ja jos
	mahdollisten rypp‰iden m‰‰r‰ == serialien m‰‰r‰ niin lasketaan VARMAT (sama logiikka kun 1. kohta)
	5.1 p‰ivit‰ omat reunavektorit (solved####Border) (tarkista myˆs onko omat samat kuin mapin)


en en‰‰ muista miss‰ kohdassa, mutta esim kun merkit‰‰n ratkaistuja serialeja niin olisi hyv‰
tarkistaa onko t‰ll‰ hetkell‰ tutkittava oma serial yht‰ iso kuin mit‰ sen hetkisest‰ mapin border
vectorista lˆytyy, jos kyll‰ niin se on ratkaistu. muuten 1 arvon serialit kusee aika komeasti

reunassa olevien filled ruutujen ja rivin reunimmaisten serialien perusteella ratkaiseminen kans auttais

5. kohdan logiikassa oli jotain ongelmaa tyyliin jos rypp‰iden m‰‰r‰ == kun mahdollisten rypp‰iden m‰‰r‰
niin silti joku serial saattaa mahtua johonkin eri rypp‰‰seen ja silloin ei natsaa

pit‰nee tehd‰ serialeille struct niin saadaan muistiin onko serial ratkaistu vai ei:
struct Serial
{
	int value;
	bool solved;
}

jotain tuon tapaista

	for (int x = 0; x < topBorder.size(); x++)
	{
		if (topBorder[x].size() == solvedTopBorder[x].size())
		{
			bool fillThis = true;
			if (topBorder[x].size() > 1)
			{
				int tempCounter = 0;
				for (int y = 0; y < leftBorder.size(); y++)
				{
					if (column[x][y] == FILLED)
					{
						tempCounter = y;
						break;
					}
				}
				if (tempCounter > topBorder[x][0])
				{
					fillThis = false;
				}
			}
			if (fillThis)
			{
				for (int y = 0; y < column[x].size(); y++)
				{
					if (column[x][y] != FILLED)
						column[x][y] = EMPTY;
				}
				int nextY = 0;
				for (int i = 0; i < topBorder[x].size(); i++)
				{
					int unknownArea = topBorder[x][i] - solvedTopBorder[x][i];
					bool same = false;
					for (int y = nextY; y < column[x].size(); y++)
					{
						if (column[x][y] == FILLED)
						{
							same = true;
							for (int j = unknownArea; j > 0; j--)
							{
								if (y - j >= 0)
								{
									if (column[x][y - j] != FILLED)
									{
										if (y - j - 1 >= 0)
										{
											if (column[x][y - j - 1] != FILLED)
												column[x][y - j] = UNKNOWN;
										}
										else
											column[x][y - j] = UNKNOWN;
									}
								}
								if (y + topBorder[x][i] - j < leftBorder.size())
								{
									if (column[x][y + topBorder[x][i] - j] != FILLED)
									{
										if (y + topBorder[x][i] - j + 1 < leftBorder.size())
										{
											if (column[x][y + topBorder[x][i] - j + 1] != FILLED)
												column[x][y + topBorder[x][i] - j] = UNKNOWN;
										}
										else
											column[x][y + topBorder[x][i] - j] = UNKNOWN;
									}
								}
							}
						}
						if (column[x][y] != FILLED && same)
						{
							nextY = y;
							y = column[x].size();
						}
					}
				}
			}
		}
	}
